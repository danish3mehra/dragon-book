Exercise 1.1.1: What is the difference between a compiler and an interpreter?

	A compiler is a program that converts the code from a written language into the
		code of a target language, usually into an executable format which may be run
		by an operating system.
	
	An interpreter is a program that executes instructions from a source-file in
		real-time without needing to create executables or source translations.

Exercise 1.1.2: What are the advantages of (a) a compiler over an interpreter and
				(b) an interpreter over a compiler?

	Compilers are advantageous as optimisations may be made to written code which can
		increase the speed of execution and lead to a more efficient translation of
		the original source.
		Syntax errors and other problems may be detected at compile-time allowing a
		programmer to fix any mistakes before compilation of an erroneous program.
		
	Interpreters are advantageous as they execute code in real-time, removing the
		need to create an executable binary. This usually means that
		interpreted-languages are cross-platform compatible.
		Errors are generally detected at runtime as they appear which may be
		problematic in that they may not necessarily be detected during development.

Exercise 1.1.3: What advantages are there to a language-processing system in which
				the compiler produces assembly language rather than machine language?

	While compiling anything to an assembly-language or machine language will
		undoubtedly remove any notion of cross-compatibility, compiling into assembly
		may be an important aspect of system-design as it is much easier for a
		programmer to read and debug a second-generation language rather than the
		1's and 0's of first-generation machine language. This rule also goes for
		those who write the actual compiler.

Exercise 1.1.4: A compiler that translates a high-level language into another
				high-level language is called a source-to-source translator. What
				advantages are there to using C as a target language for a compiler?

	C is a widely available language that has been available for more than forty years.
		Its age has allowed C to become a standard across millions of devices and a
		large range of hardware types. This wide availability of C-enabled machines
		means that translating into C allows a compiled language to benefit from the
		same large market available to C. Using specific definitions of C such as
		ANSI C will even allow a compiled language to be used on hardware such as that
		from many years ago, or perhaps certain hardware types limited by the lack of
		CPU instructions.
		
	Another great benefit in translating to C is that it is a fairly low-level language
		which gives it great speed over other languages. C's age and standardisation has
		also allowed certain groups such as GNU to create extremely optimised C compilers
		which may benefit a program even further.

Exercise 1.1.5: Describe some of the tasks that an assembler needs to perform.

	An assembler needs to be able to compile a source file into machine-code readable
		by a specific platform, generally that on which the file is compiled.
		This machine code has to be an accurate representation of the written source
		and create relocatable code so that the program may be executed in any location
		of the computers memory unless address-specific locations are otherwise
		specified.
		